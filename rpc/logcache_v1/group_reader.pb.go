// Code generated by protoc-gen-go. DO NOT EDIT.
// source: group_reader.proto

package logcache_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import loggregator_v2 "code.cloudfoundry.org/go-loggregator/rpc/loggregator_v2"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AddToGroupRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SourceId string `protobuf:"bytes,2,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
}

func (m *AddToGroupRequest) Reset()                    { *m = AddToGroupRequest{} }
func (m *AddToGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*AddToGroupRequest) ProtoMessage()               {}
func (*AddToGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *AddToGroupRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddToGroupRequest) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

type AddToGroupResponse struct {
}

func (m *AddToGroupResponse) Reset()                    { *m = AddToGroupResponse{} }
func (m *AddToGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*AddToGroupResponse) ProtoMessage()               {}
func (*AddToGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type RemoveFromGroupRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SourceId string `protobuf:"bytes,2,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
}

func (m *RemoveFromGroupRequest) Reset()                    { *m = RemoveFromGroupRequest{} }
func (m *RemoveFromGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveFromGroupRequest) ProtoMessage()               {}
func (*RemoveFromGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *RemoveFromGroupRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RemoveFromGroupRequest) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

type RemoveFromGroupResponse struct {
}

func (m *RemoveFromGroupResponse) Reset()                    { *m = RemoveFromGroupResponse{} }
func (m *RemoveFromGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveFromGroupResponse) ProtoMessage()               {}
func (*RemoveFromGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type GroupReadRequest struct {
	Name         string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	RequesterId  uint64        `protobuf:"varint,2,opt,name=requester_id,json=requesterId" json:"requester_id,omitempty"`
	StartTime    int64         `protobuf:"varint,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime      int64         `protobuf:"varint,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	Limit        int64         `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
	EnvelopeType EnvelopeTypes `protobuf:"varint,6,opt,name=envelope_type,json=envelopeType,enum=logcache.v1.EnvelopeTypes" json:"envelope_type,omitempty"`
}

func (m *GroupReadRequest) Reset()                    { *m = GroupReadRequest{} }
func (m *GroupReadRequest) String() string            { return proto.CompactTextString(m) }
func (*GroupReadRequest) ProtoMessage()               {}
func (*GroupReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *GroupReadRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GroupReadRequest) GetRequesterId() uint64 {
	if m != nil {
		return m.RequesterId
	}
	return 0
}

func (m *GroupReadRequest) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *GroupReadRequest) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *GroupReadRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GroupReadRequest) GetEnvelopeType() EnvelopeTypes {
	if m != nil {
		return m.EnvelopeType
	}
	return EnvelopeTypes_ANY
}

type GroupReadResponse struct {
	Envelopes *loggregator_v2.EnvelopeBatch `protobuf:"bytes,1,opt,name=envelopes" json:"envelopes,omitempty"`
}

func (m *GroupReadResponse) Reset()                    { *m = GroupReadResponse{} }
func (m *GroupReadResponse) String() string            { return proto.CompactTextString(m) }
func (*GroupReadResponse) ProtoMessage()               {}
func (*GroupReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *GroupReadResponse) GetEnvelopes() *loggregator_v2.EnvelopeBatch {
	if m != nil {
		return m.Envelopes
	}
	return nil
}

type GroupRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GroupRequest) Reset()                    { *m = GroupRequest{} }
func (m *GroupRequest) String() string            { return proto.CompactTextString(m) }
func (*GroupRequest) ProtoMessage()               {}
func (*GroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *GroupRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GroupResponse struct {
	SourceIds    []string `protobuf:"bytes,1,rep,name=source_ids,json=sourceIds" json:"source_ids,omitempty"`
	RequesterIds []uint64 `protobuf:"varint,2,rep,packed,name=requester_ids,json=requesterIds" json:"requester_ids,omitempty"`
}

func (m *GroupResponse) Reset()                    { *m = GroupResponse{} }
func (m *GroupResponse) String() string            { return proto.CompactTextString(m) }
func (*GroupResponse) ProtoMessage()               {}
func (*GroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *GroupResponse) GetSourceIds() []string {
	if m != nil {
		return m.SourceIds
	}
	return nil
}

func (m *GroupResponse) GetRequesterIds() []uint64 {
	if m != nil {
		return m.RequesterIds
	}
	return nil
}

func init() {
	proto.RegisterType((*AddToGroupRequest)(nil), "logcache.v1.AddToGroupRequest")
	proto.RegisterType((*AddToGroupResponse)(nil), "logcache.v1.AddToGroupResponse")
	proto.RegisterType((*RemoveFromGroupRequest)(nil), "logcache.v1.RemoveFromGroupRequest")
	proto.RegisterType((*RemoveFromGroupResponse)(nil), "logcache.v1.RemoveFromGroupResponse")
	proto.RegisterType((*GroupReadRequest)(nil), "logcache.v1.GroupReadRequest")
	proto.RegisterType((*GroupReadResponse)(nil), "logcache.v1.GroupReadResponse")
	proto.RegisterType((*GroupRequest)(nil), "logcache.v1.GroupRequest")
	proto.RegisterType((*GroupResponse)(nil), "logcache.v1.GroupResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GroupReader service

type GroupReaderClient interface {
	AddToGroup(ctx context.Context, in *AddToGroupRequest, opts ...grpc.CallOption) (*AddToGroupResponse, error)
	RemoveFromGroup(ctx context.Context, in *RemoveFromGroupRequest, opts ...grpc.CallOption) (*RemoveFromGroupResponse, error)
	Read(ctx context.Context, in *GroupReadRequest, opts ...grpc.CallOption) (*GroupReadResponse, error)
	Group(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error)
}

type groupReaderClient struct {
	cc *grpc.ClientConn
}

func NewGroupReaderClient(cc *grpc.ClientConn) GroupReaderClient {
	return &groupReaderClient{cc}
}

func (c *groupReaderClient) AddToGroup(ctx context.Context, in *AddToGroupRequest, opts ...grpc.CallOption) (*AddToGroupResponse, error) {
	out := new(AddToGroupResponse)
	err := grpc.Invoke(ctx, "/logcache.v1.GroupReader/AddToGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupReaderClient) RemoveFromGroup(ctx context.Context, in *RemoveFromGroupRequest, opts ...grpc.CallOption) (*RemoveFromGroupResponse, error) {
	out := new(RemoveFromGroupResponse)
	err := grpc.Invoke(ctx, "/logcache.v1.GroupReader/RemoveFromGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupReaderClient) Read(ctx context.Context, in *GroupReadRequest, opts ...grpc.CallOption) (*GroupReadResponse, error) {
	out := new(GroupReadResponse)
	err := grpc.Invoke(ctx, "/logcache.v1.GroupReader/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupReaderClient) Group(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := grpc.Invoke(ctx, "/logcache.v1.GroupReader/Group", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GroupReader service

type GroupReaderServer interface {
	AddToGroup(context.Context, *AddToGroupRequest) (*AddToGroupResponse, error)
	RemoveFromGroup(context.Context, *RemoveFromGroupRequest) (*RemoveFromGroupResponse, error)
	Read(context.Context, *GroupReadRequest) (*GroupReadResponse, error)
	Group(context.Context, *GroupRequest) (*GroupResponse, error)
}

func RegisterGroupReaderServer(s *grpc.Server, srv GroupReaderServer) {
	s.RegisterService(&_GroupReader_serviceDesc, srv)
}

func _GroupReader_AddToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupReaderServer).AddToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logcache.v1.GroupReader/AddToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupReaderServer).AddToGroup(ctx, req.(*AddToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupReader_RemoveFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupReaderServer).RemoveFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logcache.v1.GroupReader/RemoveFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupReaderServer).RemoveFromGroup(ctx, req.(*RemoveFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupReader_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupReaderServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logcache.v1.GroupReader/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupReaderServer).Read(ctx, req.(*GroupReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupReader_Group_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupReaderServer).Group(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logcache.v1.GroupReader/Group",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupReaderServer).Group(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GroupReader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logcache.v1.GroupReader",
	HandlerType: (*GroupReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToGroup",
			Handler:    _GroupReader_AddToGroup_Handler,
		},
		{
			MethodName: "RemoveFromGroup",
			Handler:    _GroupReader_RemoveFromGroup_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _GroupReader_Read_Handler,
		},
		{
			MethodName: "Group",
			Handler:    _GroupReader_Group_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group_reader.proto",
}

func init() { proto.RegisterFile("group_reader.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0xf3, 0x51, 0xea, 0x49, 0x02, 0xcd, 0xa8, 0x50, 0xc7, 0x34, 0x21, 0xb8, 0x3d, 0x44,
	0x1c, 0x62, 0x35, 0x1c, 0x39, 0x20, 0x10, 0x1f, 0xca, 0x0d, 0x99, 0x5c, 0x51, 0xb4, 0xc4, 0x23,
	0xd7, 0x52, 0xec, 0x35, 0xbb, 0x1b, 0x4b, 0x55, 0xd5, 0x4b, 0xff, 0x02, 0x3f, 0x8a, 0x1f, 0xc0,
	0x8d, 0x33, 0x3f, 0x04, 0x65, 0xed, 0xa4, 0x76, 0x92, 0x86, 0x43, 0x6f, 0xd9, 0x79, 0xa3, 0xf7,
	0xe6, 0xbd, 0x99, 0x18, 0x30, 0x10, 0x7c, 0x91, 0x4c, 0x05, 0x31, 0x9f, 0xc4, 0x30, 0x11, 0x5c,
	0x71, 0x6c, 0xcc, 0x79, 0x30, 0x63, 0xb3, 0x4b, 0x1a, 0xa6, 0x17, 0xf6, 0x69, 0xc0, 0x79, 0x30,
	0x27, 0x97, 0x25, 0xa1, 0xcb, 0xe2, 0x98, 0x2b, 0xa6, 0x42, 0x1e, 0xcb, 0xac, 0xd5, 0x6e, 0xa7,
	0x23, 0x97, 0xe2, 0x94, 0xe6, 0x3c, 0xa1, 0xbc, 0xd4, 0xa4, 0x40, 0x90, 0xcc, 0x1b, 0x9c, 0x0f,
	0xd0, 0x7e, 0xe7, 0xfb, 0x13, 0xfe, 0x79, 0x29, 0xe3, 0xd1, 0x8f, 0x05, 0x49, 0x85, 0x08, 0xb5,
	0x98, 0x45, 0x64, 0x19, 0x7d, 0x63, 0x60, 0x7a, 0xfa, 0x37, 0x3e, 0x07, 0x53, 0xf2, 0x85, 0x98,
	0xd1, 0x34, 0xf4, 0xad, 0x8a, 0x06, 0x0e, 0xb3, 0xc2, 0xd8, 0x77, 0x8e, 0x01, 0x8b, 0x2c, 0x32,
	0xe1, 0xb1, 0x24, 0x67, 0x0c, 0xcf, 0x3c, 0x8a, 0x78, 0x4a, 0x9f, 0x04, 0x8f, 0x1e, 0x26, 0xd0,
	0x81, 0x93, 0x2d, 0xaa, 0x5c, 0xe5, 0x8f, 0x01, 0x47, 0x79, 0x85, 0xf9, 0xfb, 0x04, 0x5e, 0x42,
	0x53, 0x64, 0x30, 0x89, 0x95, 0x46, 0xcd, 0x6b, 0xac, 0x6b, 0x63, 0x1f, 0xbb, 0x00, 0x52, 0x31,
	0xa1, 0xa6, 0x2a, 0x8c, 0xc8, 0xaa, 0xf6, 0x8d, 0x41, 0xd5, 0x33, 0x75, 0x65, 0x12, 0x46, 0x84,
	0x1d, 0x38, 0xa4, 0xd8, 0xcf, 0xc0, 0x9a, 0x06, 0x1f, 0x51, 0xec, 0x6b, 0xe8, 0x18, 0xea, 0xf3,
	0x30, 0x0a, 0x95, 0x55, 0xd7, 0xf5, 0xec, 0x81, 0x6f, 0xa1, 0xb5, 0x4a, 0x7f, 0xaa, 0xae, 0x12,
	0xb2, 0x0e, 0xfa, 0xc6, 0xe0, 0xf1, 0xc8, 0x1e, 0x16, 0x36, 0x38, 0xfc, 0x98, 0x77, 0x4c, 0xae,
	0x12, 0x92, 0x5e, 0x93, 0x0a, 0x4f, 0xe7, 0x0b, 0xb4, 0x0b, 0xde, 0x32, 0xc7, 0xf8, 0x06, 0xcc,
	0x55, 0x93, 0xd4, 0x0e, 0x1b, 0xa3, 0xee, 0x92, 0x31, 0x10, 0x14, 0x30, 0xc5, 0xc5, 0x30, 0x1d,
	0xad, 0x49, 0xdf, 0x33, 0x35, 0xbb, 0xf4, 0xee, 0xfa, 0x1d, 0x07, 0x9a, 0xff, 0x5b, 0x85, 0xf3,
	0x15, 0x5a, 0xa5, 0x8c, 0x75, 0x2e, 0xab, 0xdd, 0x2c, 0x25, 0xab, 0x03, 0xd3, 0x33, 0x57, 0xcb,
	0x91, 0x78, 0x06, 0xad, 0x62, 0xb2, 0xd2, 0xaa, 0xf4, 0xab, 0x83, 0x9a, 0xd7, 0x2c, 0x44, 0x2b,
	0x47, 0xbf, 0xaa, 0xd0, 0x58, 0x7b, 0x21, 0x81, 0x12, 0xe0, 0xee, 0x66, 0xb0, 0x57, 0x8a, 0x64,
	0xeb, 0x24, 0xed, 0x17, 0xf7, 0xe2, 0xf9, 0x19, 0x9c, 0xdf, 0xfe, 0xfe, 0xfb, 0xb3, 0xd2, 0xb3,
	0x4f, 0xdd, 0xf4, 0xc2, 0xd5, 0x7f, 0x1a, 0xf7, 0x7a, 0x69, 0xe6, 0xc6, 0xbd, 0x5e, 0x8f, 0x7e,
	0x83, 0xb7, 0x06, 0x3c, 0xd9, 0x38, 0x24, 0x3c, 0x2b, 0x51, 0xef, 0xbe, 0x58, 0xfb, 0x7c, 0x7f,
	0x53, 0x79, 0x88, 0x57, 0xfb, 0x87, 0x98, 0x42, 0x6d, 0x99, 0x01, 0x76, 0x4b, 0x9c, 0x9b, 0x37,
	0x6c, 0xf7, 0xee, 0x83, 0x73, 0x31, 0x4b, 0x8b, 0x21, 0x1e, 0x6d, 0x8a, 0xe1, 0x37, 0xa8, 0x67,
	0xd6, 0x3a, 0xbb, 0x28, 0x32, 0x76, 0x7b, 0x17, 0x94, 0x33, 0x77, 0x35, 0xf3, 0x09, 0x3e, 0xdd,
	0xb2, 0x11, 0x91, 0x62, 0xdf, 0x0f, 0xf4, 0xa7, 0xe3, 0xf5, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xb6, 0x68, 0xc8, 0x80, 0x9c, 0x04, 0x00, 0x00,
}
