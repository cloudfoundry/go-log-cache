// Code generated by protoc-gen-go. DO NOT EDIT.
// source: promql.proto

package logcache_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PromQL struct {
}

func (m *PromQL) Reset()                    { *m = PromQL{} }
func (m *PromQL) String() string            { return proto.CompactTextString(m) }
func (*PromQL) ProtoMessage()               {}
func (*PromQL) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type PromQL_InstantQueryRequest struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	Time  int64  `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
}

func (m *PromQL_InstantQueryRequest) Reset()                    { *m = PromQL_InstantQueryRequest{} }
func (m *PromQL_InstantQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*PromQL_InstantQueryRequest) ProtoMessage()               {}
func (*PromQL_InstantQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 0} }

func (m *PromQL_InstantQueryRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *PromQL_InstantQueryRequest) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type PromQL_QueryResult struct {
	// Types that are valid to be assigned to Result:
	//	*PromQL_QueryResult_Scalar
	//	*PromQL_QueryResult_Vector
	//	*PromQL_QueryResult_Matrix
	Result isPromQL_QueryResult_Result `protobuf_oneof:"Result"`
}

func (m *PromQL_QueryResult) Reset()                    { *m = PromQL_QueryResult{} }
func (m *PromQL_QueryResult) String() string            { return proto.CompactTextString(m) }
func (*PromQL_QueryResult) ProtoMessage()               {}
func (*PromQL_QueryResult) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 1} }

type isPromQL_QueryResult_Result interface {
	isPromQL_QueryResult_Result()
}

type PromQL_QueryResult_Scalar struct {
	Scalar *PromQL_Scalar `protobuf:"bytes,1,opt,name=scalar,oneof"`
}
type PromQL_QueryResult_Vector struct {
	Vector *PromQL_Vector `protobuf:"bytes,2,opt,name=vector,oneof"`
}
type PromQL_QueryResult_Matrix struct {
	Matrix *PromQL_Matrix `protobuf:"bytes,3,opt,name=matrix,oneof"`
}

func (*PromQL_QueryResult_Scalar) isPromQL_QueryResult_Result() {}
func (*PromQL_QueryResult_Vector) isPromQL_QueryResult_Result() {}
func (*PromQL_QueryResult_Matrix) isPromQL_QueryResult_Result() {}

func (m *PromQL_QueryResult) GetResult() isPromQL_QueryResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *PromQL_QueryResult) GetScalar() *PromQL_Scalar {
	if x, ok := m.GetResult().(*PromQL_QueryResult_Scalar); ok {
		return x.Scalar
	}
	return nil
}

func (m *PromQL_QueryResult) GetVector() *PromQL_Vector {
	if x, ok := m.GetResult().(*PromQL_QueryResult_Vector); ok {
		return x.Vector
	}
	return nil
}

func (m *PromQL_QueryResult) GetMatrix() *PromQL_Matrix {
	if x, ok := m.GetResult().(*PromQL_QueryResult_Matrix); ok {
		return x.Matrix
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PromQL_QueryResult) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PromQL_QueryResult_OneofMarshaler, _PromQL_QueryResult_OneofUnmarshaler, _PromQL_QueryResult_OneofSizer, []interface{}{
		(*PromQL_QueryResult_Scalar)(nil),
		(*PromQL_QueryResult_Vector)(nil),
		(*PromQL_QueryResult_Matrix)(nil),
	}
}

func _PromQL_QueryResult_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PromQL_QueryResult)
	// Result
	switch x := m.Result.(type) {
	case *PromQL_QueryResult_Scalar:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Scalar); err != nil {
			return err
		}
	case *PromQL_QueryResult_Vector:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vector); err != nil {
			return err
		}
	case *PromQL_QueryResult_Matrix:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Matrix); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PromQL_QueryResult.Result has unexpected type %T", x)
	}
	return nil
}

func _PromQL_QueryResult_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PromQL_QueryResult)
	switch tag {
	case 1: // Result.scalar
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PromQL_Scalar)
		err := b.DecodeMessage(msg)
		m.Result = &PromQL_QueryResult_Scalar{msg}
		return true, err
	case 2: // Result.vector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PromQL_Vector)
		err := b.DecodeMessage(msg)
		m.Result = &PromQL_QueryResult_Vector{msg}
		return true, err
	case 3: // Result.matrix
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PromQL_Matrix)
		err := b.DecodeMessage(msg)
		m.Result = &PromQL_QueryResult_Matrix{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PromQL_QueryResult_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PromQL_QueryResult)
	// Result
	switch x := m.Result.(type) {
	case *PromQL_QueryResult_Scalar:
		s := proto.Size(x.Scalar)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PromQL_QueryResult_Vector:
		s := proto.Size(x.Vector)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PromQL_QueryResult_Matrix:
		s := proto.Size(x.Matrix)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PromQL_Scalar struct {
	Time  int64   `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
}

func (m *PromQL_Scalar) Reset()                    { *m = PromQL_Scalar{} }
func (m *PromQL_Scalar) String() string            { return proto.CompactTextString(m) }
func (*PromQL_Scalar) ProtoMessage()               {}
func (*PromQL_Scalar) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 2} }

func (m *PromQL_Scalar) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PromQL_Scalar) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type PromQL_Vector struct {
	Samples []*PromQL_Sample `protobuf:"bytes,1,rep,name=samples" json:"samples,omitempty"`
}

func (m *PromQL_Vector) Reset()                    { *m = PromQL_Vector{} }
func (m *PromQL_Vector) String() string            { return proto.CompactTextString(m) }
func (*PromQL_Vector) ProtoMessage()               {}
func (*PromQL_Vector) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 3} }

func (m *PromQL_Vector) GetSamples() []*PromQL_Sample {
	if m != nil {
		return m.Samples
	}
	return nil
}

type PromQL_Point struct {
	Time  int64   `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
}

func (m *PromQL_Point) Reset()                    { *m = PromQL_Point{} }
func (m *PromQL_Point) String() string            { return proto.CompactTextString(m) }
func (*PromQL_Point) ProtoMessage()               {}
func (*PromQL_Point) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 4} }

func (m *PromQL_Point) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PromQL_Point) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type PromQL_Sample struct {
	Metric map[string]string `protobuf:"bytes,1,rep,name=metric" json:"metric,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Point  *PromQL_Point     `protobuf:"bytes,2,opt,name=point" json:"point,omitempty"`
}

func (m *PromQL_Sample) Reset()                    { *m = PromQL_Sample{} }
func (m *PromQL_Sample) String() string            { return proto.CompactTextString(m) }
func (*PromQL_Sample) ProtoMessage()               {}
func (*PromQL_Sample) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 5} }

func (m *PromQL_Sample) GetMetric() map[string]string {
	if m != nil {
		return m.Metric
	}
	return nil
}

func (m *PromQL_Sample) GetPoint() *PromQL_Point {
	if m != nil {
		return m.Point
	}
	return nil
}

type PromQL_Matrix struct {
	Series []*PromQL_Series `protobuf:"bytes,1,rep,name=series" json:"series,omitempty"`
}

func (m *PromQL_Matrix) Reset()                    { *m = PromQL_Matrix{} }
func (m *PromQL_Matrix) String() string            { return proto.CompactTextString(m) }
func (*PromQL_Matrix) ProtoMessage()               {}
func (*PromQL_Matrix) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 6} }

func (m *PromQL_Matrix) GetSeries() []*PromQL_Series {
	if m != nil {
		return m.Series
	}
	return nil
}

type PromQL_Series struct {
	Metric map[string]string `protobuf:"bytes,1,rep,name=metric" json:"metric,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Points []*PromQL_Point   `protobuf:"bytes,2,rep,name=points" json:"points,omitempty"`
}

func (m *PromQL_Series) Reset()                    { *m = PromQL_Series{} }
func (m *PromQL_Series) String() string            { return proto.CompactTextString(m) }
func (*PromQL_Series) ProtoMessage()               {}
func (*PromQL_Series) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 7} }

func (m *PromQL_Series) GetMetric() map[string]string {
	if m != nil {
		return m.Metric
	}
	return nil
}

func (m *PromQL_Series) GetPoints() []*PromQL_Point {
	if m != nil {
		return m.Points
	}
	return nil
}

func init() {
	proto.RegisterType((*PromQL)(nil), "logcache.v1.PromQL")
	proto.RegisterType((*PromQL_InstantQueryRequest)(nil), "logcache.v1.PromQL.InstantQueryRequest")
	proto.RegisterType((*PromQL_QueryResult)(nil), "logcache.v1.PromQL.QueryResult")
	proto.RegisterType((*PromQL_Scalar)(nil), "logcache.v1.PromQL.Scalar")
	proto.RegisterType((*PromQL_Vector)(nil), "logcache.v1.PromQL.Vector")
	proto.RegisterType((*PromQL_Point)(nil), "logcache.v1.PromQL.Point")
	proto.RegisterType((*PromQL_Sample)(nil), "logcache.v1.PromQL.Sample")
	proto.RegisterType((*PromQL_Matrix)(nil), "logcache.v1.PromQL.Matrix")
	proto.RegisterType((*PromQL_Series)(nil), "logcache.v1.PromQL.Series")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PromQLQuerier service

type PromQLQuerierClient interface {
	InstantQuery(ctx context.Context, in *PromQL_InstantQueryRequest, opts ...grpc.CallOption) (*PromQL_QueryResult, error)
}

type promQLQuerierClient struct {
	cc *grpc.ClientConn
}

func NewPromQLQuerierClient(cc *grpc.ClientConn) PromQLQuerierClient {
	return &promQLQuerierClient{cc}
}

func (c *promQLQuerierClient) InstantQuery(ctx context.Context, in *PromQL_InstantQueryRequest, opts ...grpc.CallOption) (*PromQL_QueryResult, error) {
	out := new(PromQL_QueryResult)
	err := grpc.Invoke(ctx, "/logcache.v1.PromQLQuerier/InstantQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PromQLQuerier service

type PromQLQuerierServer interface {
	InstantQuery(context.Context, *PromQL_InstantQueryRequest) (*PromQL_QueryResult, error)
}

func RegisterPromQLQuerierServer(s *grpc.Server, srv PromQLQuerierServer) {
	s.RegisterService(&_PromQLQuerier_serviceDesc, srv)
}

func _PromQLQuerier_InstantQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromQL_InstantQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromQLQuerierServer).InstantQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logcache.v1.PromQLQuerier/InstantQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromQLQuerierServer).InstantQuery(ctx, req.(*PromQL_InstantQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PromQLQuerier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logcache.v1.PromQLQuerier",
	HandlerType: (*PromQLQuerierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstantQuery",
			Handler:    _PromQLQuerier_InstantQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "promql.proto",
}

func init() { proto.RegisterFile("promql.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xcf, 0xaa, 0xd4, 0x30,
	0x14, 0xc6, 0xcd, 0x8c, 0x13, 0xbd, 0x67, 0x46, 0x90, 0xe8, 0xa2, 0x06, 0xc1, 0xe1, 0x2e, 0xf4,
	0xae, 0x5a, 0x66, 0x74, 0xa1, 0x22, 0x57, 0x10, 0x04, 0x05, 0x2f, 0xdc, 0x1b, 0xe1, 0xee, 0x63,
	0x09, 0x63, 0x30, 0x6d, 0x3a, 0x49, 0x5a, 0x9c, 0x85, 0x1b, 0x5f, 0xc1, 0x57, 0x11, 0xc1, 0xe7,
	0x70, 0xe7, 0xda, 0x07, 0x91, 0xfc, 0x19, 0xad, 0xd0, 0xfa, 0x07, 0x77, 0x39, 0xf0, 0xfb, 0xce,
	0x77, 0xbe, 0x43, 0x4f, 0x61, 0xd1, 0x18, 0x5d, 0x6d, 0x55, 0xde, 0x18, 0xed, 0x34, 0x99, 0x2b,
	0xbd, 0x29, 0x79, 0xf9, 0x5a, 0xe4, 0xdd, 0x8a, 0xde, 0xdc, 0x68, 0xbd, 0x51, 0xa2, 0xe0, 0x8d,
	0x2c, 0x78, 0x5d, 0x6b, 0xc7, 0x9d, 0xd4, 0xb5, 0x8d, 0xe8, 0xe1, 0x57, 0x0c, 0xf8, 0xd4, 0xe8,
	0xea, 0xec, 0x05, 0x7d, 0x0c, 0xd7, 0x9e, 0xd7, 0xd6, 0xf1, 0xda, 0x9d, 0xb5, 0xc2, 0xec, 0x98,
	0xd8, 0xb6, 0xc2, 0x3a, 0x72, 0x1d, 0x66, 0x5b, 0x5f, 0x67, 0x68, 0x89, 0x8e, 0x0e, 0x58, 0x2c,
	0x08, 0x81, 0x8b, 0x4e, 0x56, 0x22, 0x9b, 0x2c, 0xd1, 0xd1, 0x94, 0x85, 0x37, 0xfd, 0x8c, 0x60,
	0x9e, 0xa4, 0xb6, 0x55, 0x8e, 0xdc, 0x03, 0x6c, 0x4b, 0xae, 0xb8, 0x09, 0xd2, 0xf9, 0x9a, 0xe6,
	0xbd, 0xb9, 0xf2, 0xe8, 0x9a, 0xbf, 0x0c, 0xc4, 0xb3, 0x0b, 0x2c, 0xb1, 0x5e, 0xd5, 0x89, 0xd2,
	0x69, 0x13, 0x7a, 0x8f, 0xa8, 0xce, 0x03, 0xe1, 0x55, 0x91, 0xf5, 0xaa, 0x8a, 0x3b, 0x23, 0xdf,
	0x66, 0xd3, 0x71, 0xd5, 0x49, 0x20, 0xbc, 0x2a, 0xb2, 0x4f, 0x2e, 0x03, 0x8e, 0xb3, 0xd2, 0x35,
	0xe0, 0x38, 0xc9, 0x8f, 0x64, 0xe8, 0x67, 0x32, 0xbf, 0x83, 0x8e, 0xab, 0x36, 0xc6, 0x45, 0x2c,
	0x16, 0xf4, 0x18, 0xf0, 0xf9, 0xde, 0xfd, 0x92, 0xe5, 0x55, 0xa3, 0x84, 0xcd, 0xd0, 0x72, 0x3a,
	0x1a, 0x35, 0x20, 0x6c, 0x8f, 0xd2, 0x15, 0xcc, 0x4e, 0xb5, 0xac, 0xdd, 0x3f, 0x58, 0x7e, 0x44,
	0x80, 0x63, 0x1b, 0x72, 0x0c, 0xb8, 0x12, 0xce, 0xc8, 0x32, 0x59, 0xde, 0x1e, 0xb7, 0xcc, 0x4f,
	0x02, 0xf8, 0xb4, 0x76, 0x66, 0xc7, 0x92, 0x8a, 0x14, 0x30, 0x6b, 0xbc, 0x7b, 0x5a, 0xf3, 0x8d,
	0x21, 0x79, 0x18, 0x8f, 0x45, 0x8e, 0x3e, 0x80, 0x79, 0xaf, 0x0f, 0xb9, 0x0a, 0xd3, 0x37, 0x62,
	0xff, 0x55, 0xf8, 0xe7, 0xaf, 0x23, 0x1f, 0xa4, 0x91, 0x1f, 0x4e, 0xee, 0x23, 0xfa, 0x08, 0x70,
	0xdc, 0x3d, 0x59, 0x03, 0xb6, 0xc2, 0xc8, 0x3f, 0x2c, 0x2a, 0x10, 0x2c, 0x91, 0xf4, 0x93, 0x0f,
	0x1d, 0x9e, 0x7f, 0x19, 0x3a, 0xb0, 0x83, 0xa1, 0x57, 0x80, 0x43, 0x18, 0x9b, 0x4d, 0x82, 0xfe,
	0x37, 0xa9, 0x13, 0xf8, 0x1f, 0xb1, 0xd7, 0xef, 0xe0, 0x4a, 0x6c, 0xe9, 0xaf, 0x42, 0x0a, 0x43,
	0x14, 0x2c, 0xfa, 0x27, 0x46, 0xee, 0x0c, 0xd9, 0x0f, 0x1c, 0x21, 0xbd, 0x35, 0x04, 0xf6, 0x6e,
	0xed, 0x90, 0xbc, 0xff, 0xf2, 0xed, 0xc3, 0x64, 0x41, 0xa0, 0xe8, 0x56, 0x45, 0xfc, 0x19, 0xbc,
	0xc2, 0xe1, 0xc4, 0xef, 0x7e, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x68, 0xf6, 0x12, 0xe1, 0x1d, 0x04,
	0x00, 0x00,
}
