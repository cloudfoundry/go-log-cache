// Code generated by protoc-gen-go. DO NOT EDIT.
// source: egress.proto

/*
Package logcache is a generated protocol buffer package.

It is generated from these files:
	egress.proto
	group_reader.proto
	ingress.proto

It has these top-level messages:
	ReadRequest
	ReadResponse
	AddToGroupRequest
	AddToGroupResponse
	RemoveFromGroupRequest
	RemoveFromGroupResponse
	GroupReadRequest
	GroupReadResponse
	GroupRequest
	GroupResponse
	SendRequest
	SendResponse
*/
package logcache

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import loggregator_v2 "code.cloudfoundry.org/go-loggregator/rpc/loggregator_v2"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EnvelopeTypes int32

const (
	EnvelopeTypes_ANY     EnvelopeTypes = 0
	EnvelopeTypes_LOG     EnvelopeTypes = 1
	EnvelopeTypes_COUNTER EnvelopeTypes = 2
	EnvelopeTypes_GAUGE   EnvelopeTypes = 3
	EnvelopeTypes_TIMER   EnvelopeTypes = 4
	EnvelopeTypes_EVENT   EnvelopeTypes = 5
)

var EnvelopeTypes_name = map[int32]string{
	0: "ANY",
	1: "LOG",
	2: "COUNTER",
	3: "GAUGE",
	4: "TIMER",
	5: "EVENT",
}
var EnvelopeTypes_value = map[string]int32{
	"ANY":     0,
	"LOG":     1,
	"COUNTER": 2,
	"GAUGE":   3,
	"TIMER":   4,
	"EVENT":   5,
}

func (x EnvelopeTypes) String() string {
	return proto.EnumName(EnvelopeTypes_name, int32(x))
}
func (EnvelopeTypes) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ReadRequest struct {
	SourceId     string        `protobuf:"bytes,1,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	StartTime    int64         `protobuf:"varint,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime      int64         `protobuf:"varint,3,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	Limit        int64         `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	EnvelopeType EnvelopeTypes `protobuf:"varint,5,opt,name=envelope_type,json=envelopeType,enum=logcache.EnvelopeTypes" json:"envelope_type,omitempty"`
	Descending   bool          `protobuf:"varint,6,opt,name=descending" json:"descending,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReadRequest) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *ReadRequest) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *ReadRequest) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *ReadRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReadRequest) GetEnvelopeType() EnvelopeTypes {
	if m != nil {
		return m.EnvelopeType
	}
	return EnvelopeTypes_ANY
}

func (m *ReadRequest) GetDescending() bool {
	if m != nil {
		return m.Descending
	}
	return false
}

type ReadResponse struct {
	Envelopes *loggregator_v2.EnvelopeBatch `protobuf:"bytes,1,opt,name=envelopes" json:"envelopes,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReadResponse) GetEnvelopes() *loggregator_v2.EnvelopeBatch {
	if m != nil {
		return m.Envelopes
	}
	return nil
}

func init() {
	proto.RegisterType((*ReadRequest)(nil), "logcache.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "logcache.ReadResponse")
	proto.RegisterEnum("logcache.EnvelopeTypes", EnvelopeTypes_name, EnvelopeTypes_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Egress service

type EgressClient interface {
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
}

type egressClient struct {
	cc *grpc.ClientConn
}

func NewEgressClient(cc *grpc.ClientConn) EgressClient {
	return &egressClient{cc}
}

func (c *egressClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := grpc.Invoke(ctx, "/logcache.Egress/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Egress service

type EgressServer interface {
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
}

func RegisterEgressServer(s *grpc.Server, srv EgressServer) {
	s.RegisterService(&_Egress_serviceDesc, srv)
}

func _Egress_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgressServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logcache.Egress/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgressServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Egress_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logcache.Egress",
	HandlerType: (*EgressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _Egress_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "egress.proto",
}

func init() { proto.RegisterFile("egress.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x51, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xc5, 0x49, 0x9c, 0xd8, 0x93, 0x14, 0x99, 0x55, 0x29, 0x26, 0xb4, 0xc8, 0xca, 0xc9, 0xe2,
	0x60, 0x0b, 0x73, 0x84, 0x4b, 0x41, 0x56, 0x54, 0x01, 0x89, 0xb4, 0xb8, 0x48, 0x1c, 0x50, 0xb4,
	0x78, 0x47, 0xee, 0x4a, 0xce, 0xae, 0xf1, 0x6e, 0x2d, 0x55, 0x88, 0x0b, 0xbf, 0xc0, 0xa7, 0x71,
	0xe1, 0x03, 0xf8, 0x10, 0x64, 0xbb, 0x69, 0x02, 0xb7, 0x37, 0xef, 0xcd, 0x68, 0xde, 0xd3, 0x83,
	0x19, 0x16, 0x35, 0x6a, 0x1d, 0x55, 0xb5, 0x32, 0x8a, 0x38, 0xa5, 0x2a, 0x72, 0x96, 0x5f, 0xe1,
	0xfc, 0x41, 0x93, 0xc4, 0x28, 0x1b, 0x2c, 0x55, 0x85, 0xbd, 0x38, 0x3f, 0x2d, 0x94, 0x2a, 0x4a,
	0x8c, 0x59, 0x25, 0x62, 0x26, 0xa5, 0x32, 0xcc, 0x08, 0x25, 0x6f, 0x4f, 0x17, 0xbf, 0x2d, 0x98,
	0x52, 0x64, 0x9c, 0xe2, 0xd7, 0x6b, 0xd4, 0x86, 0x3c, 0x01, 0x57, 0xab, 0xeb, 0x3a, 0xc7, 0x8d,
	0xe0, 0xbe, 0x15, 0x58, 0xa1, 0x4b, 0x9d, 0x9e, 0xb8, 0xe0, 0xe4, 0x0c, 0x40, 0x1b, 0x56, 0x9b,
	0x8d, 0x11, 0x5b, 0xf4, 0x07, 0x81, 0x15, 0x0e, 0xa9, 0xdb, 0x31, 0x99, 0xd8, 0x22, 0x79, 0x0c,
	0x0e, 0x4a, 0xde, 0x8b, 0xc3, 0x4e, 0x9c, 0xa0, 0xe4, 0x9d, 0x74, 0x0c, 0x76, 0x29, 0xb6, 0xc2,
	0xf8, 0xa3, 0x8e, 0xef, 0x07, 0xf2, 0x0a, 0x8e, 0x76, 0x66, 0x37, 0xe6, 0xa6, 0x42, 0xdf, 0x0e,
	0xac, 0xf0, 0x7e, 0xf2, 0x28, 0xda, 0xe5, 0x89, 0xd2, 0x5b, 0x39, 0xbb, 0xa9, 0x50, 0xd3, 0x19,
	0x1e, 0x8c, 0xe4, 0x29, 0x00, 0x47, 0x9d, 0xa3, 0xe4, 0x42, 0x16, 0xfe, 0x38, 0xb0, 0x42, 0x87,
	0x1e, 0x30, 0x8b, 0xb7, 0x30, 0xeb, 0x93, 0xe9, 0x4a, 0x49, 0x8d, 0xe4, 0x25, 0xb8, 0xbb, 0x7b,
	0xdd, 0x45, 0x9b, 0x26, 0x67, 0xed, 0xa7, 0xa2, 0xc6, 0x82, 0x19, 0x55, 0x47, 0x4d, 0x72, 0xf7,
	0xef, 0x35, 0x33, 0xf9, 0x15, 0xdd, 0xef, 0x3f, 0x5b, 0xc3, 0xd1, 0x3f, 0x5e, 0xc8, 0x04, 0x86,
	0xe7, 0xab, 0x4f, 0xde, 0xbd, 0x16, 0xbc, 0x5b, 0x2f, 0x3d, 0x8b, 0x4c, 0x61, 0xf2, 0x66, 0x7d,
	0xb9, 0xca, 0x52, 0xea, 0x0d, 0x88, 0x0b, 0xf6, 0xf2, 0xfc, 0x72, 0x99, 0x7a, 0xc3, 0x16, 0x66,
	0x17, 0xef, 0x53, 0xea, 0x8d, 0x5a, 0x98, 0x7e, 0x4c, 0x57, 0x99, 0x67, 0x27, 0x9f, 0x61, 0x9c,
	0x76, 0x1d, 0x92, 0x0f, 0x30, 0x6a, 0x7d, 0x92, 0x87, 0xfb, 0xd8, 0x07, 0x8d, 0xcc, 0x4f, 0xfe,
	0xa7, 0xfb, 0x38, 0x8b, 0xd3, 0x1f, 0xbf, 0xfe, 0xfc, 0x1c, 0x9c, 0x90, 0xe3, 0xb8, 0x79, 0x1e,
	0xd7, 0xc8, 0x78, 0xfc, 0xed, 0xae, 0xb9, 0xef, 0x5f, 0xc6, 0x5d, 0xbd, 0x2f, 0xfe, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x0d, 0xd8, 0x0a, 0x96, 0x29, 0x02, 0x00, 0x00,
}
